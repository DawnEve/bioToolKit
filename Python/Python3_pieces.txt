python3 程序片段



========================================
正则表达式
----------------------------------------
1.非字母分割字符串，得到数组
import re
re.split(r'[^A-Za-z]+',"book/cat/n")
结果：
['book', 'cat', 'n']



2.非数字删除
re.sub(r'\D', '', '010-123-456') #
结果
'010123456'


3.正则替换
(1)import re
aa='chr10_320396_320418_-'
a2=re.sub("_","\t",aa)
print(a2)
结果
chr10	320396	320418	-

(2)
import re
i="chr1|139786|139805|+"
a=re.sub("|","\t",i) #这里意思是任意字符分割。
b=re.sub("\|","\t",i)
print("不希望看到的结果:",a)
print("希望看到的结果:",b)
结果:
不希望看到的结果: 	c	h	r	1	|	1	3	9	7	8	6	|	1	3	9	8	0	5	|	+	
希望看到的结果: chr1	139786	139805	+






========================================
hash和sha1摘要
----------------------------------------
1.获得文件的hash或者sha1
import hashlib
txt=open('G:\learngit\Python3\pythonCodeGit\day9-IO\enTextAnalysis\cet4-3.txt',encoding="utf-8").read()
txtEncode=txt.encode('utf-8')

md5_before = hashlib.md5( txtEncode ).hexdigest()
print(md5_before)

sha1_b=hashlib.sha1(txtEncode).hexdigest()
print(sha1_b)

结果：
0b613ea3f1bb7e3409d56d213c40a79c
06b2aba0fe50c0370d2dcaa4c1224597b29273be




========================================
时间和日期
----------------------------------------
1.获取英文的时间格式，程序运行时间
import time

mydate = time.strftime("%b %d, %Y")
print(mydate)

time1=time.time()
print(time1)

time.sleep(1)#休息1s
print(time.time()-time1)

结果
Jun 02, 2018
1527907537.565396
1.000213861465454



========================================
文件读写 IO
----------------------------------------
1.拼装路径和读取文件
import os
path=os.path.join("d:/Temp","sample.txt") #拼装路径
print(path)

file=open(path,'r',encoding="utf-8") #读取文件内容
print(file.readline())
file.close()

结果：
d:/Temp\sample.txt
Jun 01, 2018 | 619 words



2.打开文件
with open('/path/to/file', 'r') as f:
    print(f.read())
这样不用写try语句了，且自动关闭文件。


	



========================================
数学运算
----------------------------------------
1.保留3位有效数字
round(3/7*100,3)
结果：
42.857

2.整除符号是//
int(249206830//1e6)
结果
249




========================================
字典操作
----------------------------------------
1.获取字典的键的集合
a={'a':12,'b':3}
a.keys()
结果
dict_keys(['a', 'b'])




========================================
序列化和反序列化
----------------------------------------
1.
#使用pickle序列化和反序列化
import pickle 

a={'name':"Tome", 'age':15}
b=[[1,200,400],[4,6,9]]

########序列化
fa=open(r"D:\Temp\bedFile\000a.txt.cache",'wb')
fb=open(r"D:\Temp\bedFile\000b.txt.cache",'wb')
pickle.dump(a,fa)
pickle.dump(b,fb)

#推荐使用的形式，不用close文件了
with open(r"0001.cache",'wb') as f:
    pickle.dump([a,b],f);

print(a,b)
#
fa.close()
fb.close()


2.
##########反序列化
fa2=open(r"D:\Temp\bedFile\000a.txt.cache",'rb')
fb2=open(r"D:\Temp\bedFile\000b.txt.cache",'rb')
a2=pickle.load(fa2)
b2=pickle.load(fb2)

#推荐使用的形式，不用close文件了
with open(r"0001.cache",'rb') as f:
    ab=pickle.load(f);

print(a2,b2," 合并后: ",ab)
#
fa2.close()
fb2.close()
结果
{'name': 'Tome', 'age': 15} [[1, 200, 400], [4, 6, 9]]  
合并后:  [{'name': 'Tome', 'age': 15}, [[1, 200, 400], [4, 6, 9]]]



========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------




========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------




